// prettier-ignore
  const wasmBinary = new Uint8Array([
    0,97,115,109,1,0,0,0,1,147,128,128,128,0,4,96,0,1,127,96,1,127,1,127,96,2,127,127,0,96,1,127,0,2,160,128,128,128,0,2,3,101,110,118,10,99,111,110,115,111,108,101,108,111,103,0,1,3,101,110,118,6,109,101,109,111,114,121,2,0,1,3,131,128,128,128,0,2,2,3,4,132,128,128,128,0,1,112,0,0,7,150,128,128,128,0,2,8,114,101,97,100,112,100,116,97,0,1,7,105,110,100,101,120,50,50,0,2,9,129,128,128,128,0,0,10,226,132,128,128,0,2,168,132,128,128,0,1,1,127,2,64,65,0,40,2,4,65,208,0,107,34,2,32,0,54,2,76,32,2,32,1,54,2,72,32,2,32,2,40,2,76,34,1,54,2,68,65,0,32,1,40,2,4,34,1,65,38,110,54,2,12,65,0,32,2,40,2,76,34,0,54,2,16,65,0,32,0,32,1,106,34,1,40,2,4,65,2,118,54,2,20,32,2,32,1,54,2,76,32,2,32,1,54,2,64,65,0,32,2,40,2,76,34,0,54,2,24,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,60,65,0,32,1,40,2,4,65,10,110,54,2,28,65,0,32,2,40,2,76,34,0,54,2,32,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,56,65,0,32,1,40,2,4,65,2,118,54,2,36,65,0,32,2,40,2,76,34,0,54,2,40,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,52,65,0,32,1,40,2,4,65,22,110,54,2,44,65,0,32,2,40,2,76,34,0,54,2,48,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,48,65,0,32,1,40,2,4,65,2,118,54,2,52,65,0,32,2,40,2,76,34,0,54,2,56,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,44,65,0,32,1,40,2,4,65,10,110,54,2,60,65,0,32,2,40,2,76,34,0,54,2,64,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,40,65,0,32,1,40,2,4,65,2,118,54,2,68,65,0,32,2,40,2,76,34,0,54,2,72,32,2,32,0,32,1,40,2,4,106,34,1,54,2,76,32,2,32,1,54,2,36,65,0,32,1,40,2,4,65,46,110,54,2,76,65,0,32,2,40,2,76,34,0,54,2,80,32,2,32,0,32,1,40,2,4,106,54,2,76,32,2,65,0,40,2,16,54,2,0,32,2,65,0,40,2,24,54,2,4,32,2,65,0,40,2,32,54,2,8,32,2,65,0,40,2,40,54,2,12,32,2,65,0,40,2,48,54,2,16,32,2,65,0,40,2,56,54,2,20,32,2,65,0,40,2,64,54,2,24,32,2,65,0,40,2,72,54,2,28,32,2,65,0,40,2,80,54,2,32,32,2,32,2,54,2,72,11,11,175,128,128,128,0,1,1,127,2,64,65,0,65,0,40,2,4,65,16,107,34,1,54,2,4,32,1,32,0,54,2,12,32,0,40,2,0,16,0,26,65,0,32,1,65,16,106,54,2,4,11,11,11,177,129,128,128,0,19,0,65,4,11,4,112,39,0,0,0,65,12,11,4,0,0,0,0,0,65,16,11,4,0,0,0,0,0,65,20,11,4,0,0,0,0,0,65,24,11,4,0,0,0,0,0,65,28,11,4,0,0,0,0,0,65,32,11,4,0,0,0,0,0,65,36,11,4,0,0,0,0,0,65,40,11,4,0,0,0,0,0,65,44,11,4,0,0,0,0,0,65,48,11,4,0,0,0,0,0,65,52,11,4,0,0,0,0,0,65,56,11,4,0,0,0,0,0,65,60,11,4,0,0,0,0,0,65,192,0,11,4,0,0,0,0,0,65,196,0,11,4,0,0,0,0,0,65,200,0,11,4,0,0,0,0,0,65,204,0,11,4,0,0,0,0,0,65,208,0,11,4,0,0,0,0
  ]);   
   const mem = new WebAssembly.Memory({
    initial: 100, //100 x 64k ..just putting in some safe values now
    maximum: 100,
  });
 async  function init(){
   const r= await WebAssembly.instantiate(wasmBinary, {
      env: {
        memory: mem,
        consolelog:(a,b)=>console.log(new Uint8Array(mem.buffer,a,b).map(c=>String.fromCharCode(c)).join('')),
        table: new WebAssembly.Table({ element: "anyfunc", initial: 6 }),
        _abort:()=>console.log('ab'),
        _grow:(a,b)=>console.log(a,b),
        memcpy:(a,b,c)=>console.log(a,b,c)
      },
    });
    return {
        ...r.instance.exports,mem
    }

  }
  export {init,mem};
  
  